name: CI/CD Pipeline for Quotes API

on:
  push:
    branches: [ main ]
    paths:
      - 'Project2/**'
      - '.github/workflows/ci_pipeline_project2.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Project2/**'
      - '.github/workflows/ci_pipeline_project2.yml'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Project2/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      working-directory: ./Project2
      
    - name: Run tests
      run: npm test
      working-directory: ./Project2
      continue-on-error: true  
      
    - name: Security Audit
      run: npm audit --audit-level=moderate
      working-directory: ./Project2
      continue-on-error: true

    - name: Check SonarQube availability
      id: check-sonar
      run: |
        if [ -n "${{ secrets.SONARQUBE_HOST }}" ]; then
          echo "sonar_available=true" >> "$GITHUB_OUTPUT"
        else
          echo "sonar_available=false" >> "$GITHUB_OUTPUT"
        fi
     
    - name: SonarQube Scan
      if: steps.check-sonar.outputs.sonar_available == 'true'
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONARQUBE_HOST: ${{ secrets.SONARQUBE_HOST }}
        SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

  docker-build-and-deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/quotes-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/quotes-api:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/quotes-api:latest"
        
  notify:
    needs: [test-and-build, docker-build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Slack Success Notification
      if: ${{ needs.test-and-build.result == 'success' && needs.docker-build-and-deploy.result == 'success' }}
      uses: slackapi/slack-github-action@v1.25.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: |
          ‚úÖ *Quotes API* deployment succeeded!
          
          *Branch:* ${{ github.ref_name }}
          *Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
          *Actor:* ${{ github.actor }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        
    - name: Slack Failure Notification
      if: ${{ needs.test-and-build.result == 'failure' || needs.docker-build-and-deploy.result == 'failure' }}
      uses: slackapi/slack-github-action@v1.25.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: |
          ‚ùå *Quotes API* deployment failed!
          
          *Branch:* ${{ github.ref_name }}
          *Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
          *Actor:* ${{ github.actor }}
          
          <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
